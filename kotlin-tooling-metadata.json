/* Start spoofViewport.js */
// Enables 4K resolution tricking youtube into thinking that we are on a 4K TV
(function () {
  var existing = document.querySelector('meta[name="viewport"]');
  if (existing) {
    existing.setAttribute(
      "content",
      "width=3840, height=2160, initial-scale=1.0"
    );
  } else {
    var meta = document.createElement("meta");
    meta.name = "viewport";
    meta.content = "width=3840, height=2160, initial-scale=1.0";
    document.head.appendChild(meta);
  }
})();
/* End spoofViewport.js */

/* Start menuTrigger.js */
(function () {
  function getSearchBar() {
    const searchBars = document.querySelectorAll(
      '[idomkey="ytLrSearchBarSearchTextBox"]'
    );
    return searchBars[searchBars.length - 1] ?? null;
  }

  function addMenuButton() {
    const searchBar = getSearchBar();
    if (!searchBar) return;

    const parent = searchBar.parentNode;
    if (parent.querySelector('button[data-notubetv="menu"]')) return;

    parent.style.display = "flex";
    parent.style.flexDirection = "row";
    parent.style.alignItems = "center";

    const menuButton = document.createElement("button");
    menuButton.setAttribute("data-notubetv", "menu");
    menuButton.innerHTML = `
      <svg xmlns="http://www.w3.org/2000/svg" height="56px" viewBox="0 -960 960 960" width="56px" fill="#FFFFFF" fill-opacity="0.8">
        <path d="M480-480q0-91 64.5-155.5T700-700q91 0 155.5 64.5T920-480H480ZM260-260q-91 0-155.5-64.5T40-480h440q0 91-64.5 155.5T260-260Zm220-220q-91 0-155.5-64.5T260-700q0-91 64.5-155.5T480-920v440Zm0 440v-440q91 0 155.5 64.5T700-260q0 91-64.5 155.5T480-40Z"/>
      </svg>`;
    menuButton.style.marginLeft = "54px";
    menuButton.style.padding = "35px";
    menuButton.style.background = "rgba(255, 255, 255, 0.1)";
    menuButton.style.border = "none";
    menuButton.style.borderRadius = "88px";

    parent.insertBefore(menuButton, searchBar.nextSibling);
  }

  addMenuButton();

  document.addEventListener("keydown", function (event) {
    if (event.key === "ArrowRight") {
      const searchBar = getSearchBar();
      const isFocused = searchBar?.classList?.contains(
        "ytLrSearchTextBoxFocused"
      );
      if (searchBar && isFocused) {
        modernUI();
        const menuButton = document.querySelector(
          'button[data-notubetv="menu"]'
        );
        menuButton.style.background = "white";
      }
    }
  });

  const observer = new MutationObserver(() => {
    const searchBar = getSearchBar();
    if (
      searchBar &&
      !searchBar.parentNode.querySelector('[data-notubetv="menu"]')
    ) {
      addMenuButton();
    }
  });

  observer.observe(document.body, {
    childList: true,
    subtree: true,
  });
})();
/* End menuTrigger.js */

/* Start exitBridge.js */
(function () {
  const observer = new MutationObserver(() => {
    const exitButton = document.querySelector(
      ".ytVirtualListItemLast ytlr-button.ytLrButtonLargeShape"
    );

    if (exitButton) {
      exitButton.addEventListener(
        "keydown",
        (e) => {
          if (
            (e.key === "Enter" || e.keyCode === 13) &&
            typeof ExitBridge !== "undefined" &&
            ExitBridge.onExitCalled
          ) {
            e.preventDefault();
            e.stopPropagation();
            ExitBridge.onExitCalled();
          }
        },
        true
      );
    }
  });
  observer.observe(document.body, { childList: true, subtree: true });
})();
/* End exitBridge.js */

/* Start TizenTubeScripts.js */
(function () {
  "use strict";

  const CONFIG_KEY = "ytaf-configuration";
  const defaultConfig = {
    enableAdBlock: true,
    enableSponsorBlock: true,
    sponsorBlockManualSkips: [],
    enableSponsorBlockSponsor: true,
    enableSponsorBlockIntro: true,
    enableSponsorBlockOutro: true,
    enableSponsorBlockInteraction: true,
    enableSponsorBlockSelfPromo: true,
    enableSponsorBlockMusicOfftopic: true,
    enableShorts: true,
  };

  let localConfig;

  try {
    localConfig = JSON.parse(window.localStorage[CONFIG_KEY]);
  } catch {
    localConfig = defaultConfig;
  }

  window.localConfig = window.localStorage[CONFIG_KEY]
    ? JSON.parse(window.localStorage[CONFIG_KEY])
    : defaultConfig;

  window.configRead = function (key) {
    if (window.localConfig[key] === undefined) {
      window.localConfig[key] = defaultConfig[key];
    }
    return window.localConfig[key];
  };

  window.configWrite = function (key, value) {
    window.localConfig[key] = value;
    window.localStorage[CONFIG_KEY] = JSON.stringify(window.localConfig);
  };

  // --- PATCH JSON.parse para no romper ---
  const origParse = JSON.parse;
  JSON.parse = function () {
    const r = origParse.apply(this, arguments);
    try {
      if (configRead("enableAdBlock")) {
        if (r?.adPlacements) r.adPlacements = [];
        if (r?.playerAds) r.playerAds = false;
        if (r?.adSlots) r.adSlots = [];
      }

      if (
        r?.contents?.tvBrowseRenderer?.content?.tvSurfaceContentRenderer?.content
          ?.sectionListRenderer?.contents &&
        configRead("enableAdBlock")
      ) {
        const s =
          r.contents.tvBrowseRenderer.content.tvSurfaceContentRenderer.content
            .sectionListRenderer.contents[0];
        s.shelfRenderer.content.horizontalListRenderer.items =
          s.shelfRenderer.content.horizontalListRenderer.items.filter(
            (i) => !i?.adSlotRenderer
          );
      }

      if (
        !configRead("enableShorts") &&
        r?.contents?.tvBrowseRenderer?.content?.tvSurfaceContentRenderer?.content
      ) {
        r.contents.tvBrowseRenderer.content.tvSurfaceContentRenderer.content.sectionListRenderer.contents =
          r.contents.tvBrowseRenderer.content.tvSurfaceContentRenderer.content.sectionListRenderer.contents.filter(
            (shelve) =>
              shelve.shelfRenderer?.tvhtml5ShelfRendererType !==
              "TVHTML5_SHELF_RENDERER_TYPE_SHORTS"
          );
      }
    } catch (e) {
      return r;
    }
    return r;
  };

  // --- SponsorBlock handler modificado ---
  class SponsorBlockHandler {
    video = null;
    active = true;
    attachVideoTimeout = null;
    nextSkipTimeout = null;
    sliderInterval = null;
    observer = null;
    scheduleSkipHandler = null;
    durationChangeHandler = null;
    segments = null;
    skippableCategories = [];
    manualSkippableCategories = [];

    constructor(videoID) {
      this.videoID = videoID;
    }

    async init() {
      if (!configRead("enableSponsorBlock")) return;

      // ... resto igual (omitido por brevedad)
    }

    scheduleSkip() {
      clearTimeout(this.nextSkipTimeout);
      this.nextSkipTimeout = null;

      // --- FIX: esperar a que el video esté listo ---
      if (!this.active || this.video.paused || this.video.readyState < 2)
        return;

      const current = this.video.currentTime;
      const nextSegments = this.segments
        .filter((seg) => seg.segment[0] >= current - 0.2)
        .sort((a, b) => a.segment[0] - b.segment[0]);

      if (!nextSegments.length) return;

      const [segment] = nextSegments;
      const [start, end] = segment.segment;

      if (current >= end) return;

      const delay = Math.max(0, (start - current) * 1000);

      this.nextSkipTimeout = setTimeout(() => {
        if (
          this.video.paused ||
          this.video.readyState < 2 || // <-- chequeo añadido
          !this.skippableCategories.includes(segment.category)
        )
          return;

        if (!this.manualSkippableCategories.includes(segment.category)) {
          this.video.currentTime = end;
          this.scheduleSkip();
        }
      }, delay);
    }
  }

  // resto del código igual...
})();
/* End TizenTubeScripts.js */
